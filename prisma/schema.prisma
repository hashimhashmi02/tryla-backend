generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String     @id @default(cuid())
  name      String
  email     String     @unique
  password  String
  role      Role       @default(USER)
  createdAt DateTime   @default(now())
  updaredAt DateTime   @updatedAt
  CartItem  CartItem[]
  Order     Order[]
}

model Category {
  id        String    @id @default(cuid())
  name      String    @unique
  createdAT DateTime  @default(now())
  products  Product[]
}

model Product {
  id               String       @id @default(cuid())
  title            String
  description      String
  price            Decimal      @db.Decimal(10, 2)
  stock            Int          @default(0)
  images           String[]
  categoryId       String
  createdAt        DateTime     @default(now())
  availability     Availability @default(IN_STOCK)
  careInstructions String?
  features         String[]
  fit              String?
  length           String?
  material         String?
  sizes            String[]
  updatedAt        DateTime     @updatedAt
  CartItem         CartItem[]
  OrderItem        OrderItem[]
  category         Category     @relation(fields: [categoryId], references: [id])
}

model CartItem {
  id        String   @id @default(cuid())
  userId    String
  productId String
  quantity  Int
  size      String?   
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // optional later (once all existing rows have size):
  // @@unique([userId, productId, size], name: "user_product_size")
}



model Order {
  id              String      @id @default(cuid())
  userId          String
  status          OrderStatus @default(PENDING)
  total           Decimal     @db.Decimal(10, 2)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  recipientName   String      @default("")
  recipientPhone  String      @default("")
  shippingAddress String      @default("")
  user            User        @relation(fields: [userId], references: [id])
  items           OrderItem[]
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Decimal @db.Decimal(10, 2)
  order     Order   @relation(fields: [orderId], references: [id])
  product   Product @relation(fields: [productId], references: [id])
}

model NavLink {
  id        String   @id @default(cuid())
  label     String
  url       String
  order     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  USER
  ADMIN
}

enum Availability {
  IN_STOCK
  OUT_OF_STOCK
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  DELIVERED
  CANCELLED
}
