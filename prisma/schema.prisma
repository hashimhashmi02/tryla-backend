generator client {
  provider = "prisma-client-js"
  
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role{
  USER
  ADMIN
}

model User{
id       String @id @default(cuid())
name     String 
email    String   @unique
password String
role     Role @default(USER)
createdAt DateTime @default(now())
updaredAt DateTime @updatedAt 

CartItem CartItem[]

Order Order[]
}

model Category {
  id    String @id @default(cuid())
  name  String @unique
  products  Product[]
  createdAT DateTime @default(now())
}

enum Availability {
  IN_STOCK
  OUT_OF_STOCK
}

model Product {
  id               String       @id @default(cuid())
  title            String
  description      String
  price            Decimal      @db.Decimal(10,2)
  stock            Int          @default(0)
  images           String[]     // array of image URLs
  sizes            String[]     // ["S","M","L","XL"]
  categoryId       String
  category         Category     @relation(fields: [categoryId], references: [id])
  availability     Availability @default(IN_STOCK)
  features         String[]     // e.g. ["Breathable","Quick‑dry"]
  material         String?      // e.g. "100% Cotton"
  careInstructions String?      // e.g. "Machine wash cold…"
  fit              String?      // e.g. "Relaxed fit…"
  length           String?      // e.g. "Maxi length…"
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt

  CartItem CartItem[]

  OrderItem OrderItem[]
}
  

  enum OrderStatus {
  PENDING
  COMPLETED
  CANCELLED
}

model CartItem {
  id         String   @id @default(cuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  productId  String
  product    Product  @relation(fields: [productId], references: [id])
  quantity   Int      @default(1)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([userId, productId])  
}

model Order {
  id         String       @id @default(cuid())
  userId     String
  user       User         @relation(fields: [userId], references: [id])
  status     OrderStatus  @default(PENDING)
  total      Decimal      @db.Decimal(10,2)
   paymentIntentId String?      // <— add this
  items      OrderItem[]
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
}

model OrderItem {
  id         String   @id @default(cuid())
  orderId    String
  order      Order    @relation(fields: [orderId], references: [id])
  productId  String
  product    Product  @relation(fields: [productId], references: [id])
  quantity   Int
  price      Decimal  @db.Decimal(10,2)  // snapshot of product.price at purchase
}

  

